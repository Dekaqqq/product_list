{"version":3,"sources":["components/ProdutsList/ProductsItem/ProductsItem.js","styledComponents/styled.js","redux/loading.js","services/fetchData.js","redux/error.js","redux/products.js","redux/value.js","redux/category.js","components/ProdutsList/ProductsList.js","components/ProductsInput/ProductsInput.js","components/CategoryList/CategoryList.js","components/App/App.js","redux/store/store.js","index.js"],"names":["ProductsItem","img","name","bsr_category","link","shortName","slice","Card","style","width","marginBottom","Img","variant","src","height","Body","Title","Text","Link","href","target","rel","styled","li","List","ul","ListCategoryDescription","span","a","p","loaderOn","type","loaderOff","getLoader","state","loading","fetchData","axios","get","then","data","products","getSearchValue","props","queryString","parse","item","showError","loadProducts","rootSaga","FETCH_PRODUCTS","addProducts","payload","getProducts","put","call","takeEvery","getValue","value","addCategory","category","getCategory","connect","filteredByCategory","filter","el","toLowerCase","includes","filterProductsByCategory","filteredProducts","map","key","asin","ProductsInput","text","handleChange","onSearch","setState","location","this","search","result","onChange","className","placeholder","Component","withRouter","categories","path","compose","dispatch","setCategory","shortid","generate","to","pathname","onClick","App","history","changeValue","push","changeCategory","Container","color","textAlign","Row","Col","sm","component","ProductsList","addValue","sagaMiddleware","createSagaMiddleware","middleware","rootReducer","combineReducers","error","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.7528101a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from 'react-bootstrap/Card';\n\nconst ProductsItem = ({ img, name, bsr_category, link }) => {\n    const shortName = name.slice(0, 16);\n\n    return (\n        <Card style={{ width: '10rem', marginBottom: '1rem' }}>\n            <Card.Img variant=\"top\" src={img} height=\"140\" />\n            <Card.Body>\n                <Card.Title>{bsr_category}</Card.Title>\n                <Card.Text>{shortName}</Card.Text>\n                <Card.Link\n                    href={link}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Show More\n                </Card.Link>\n            </Card.Body>\n        </Card>\n    );\n};\n\nProductsItem.propTypes = {\n    img: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    bsr_category: PropTypes.string.isRequired,\n    link: PropTypes.string.isRequired,\n};\n\nexport default ProductsItem;\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n    text-align: center;\n    margin-bottom: 20px;\n    padding: 20px;\n`;\n\nexport const List = styled.ul`\n    display: flex;\n    justify-content: space-evenly;\n    flex-wrap: wrap;\n    list-style: none;\n`;\n\nexport const ListCategoryDescription = styled.span`\n    display: block;\n    margin: 10px 0;\n    font-weight: 700;\n    cursor: pointer;\n`;\n\nexport const ListItemLink = styled.a`\n    display: block;\n    margin-bottom: 6px;\n    font-size: 1.2rem;\n    font-weight: 700;\n    text-decoration: none;\n    color: #159292;\n`;\n\nexport const ListItemName = styled.p`\n    margin: 10px 0;\n    font-size: 1.5rem;\n`;\n\nexport const ListItemPrice = styled.p`\n    font-weight: 700;\n    font-size: 1.4rem;\n    color: #0e9753;\n`;\n","// actionsTypes\n\nexport const LOADER_ON = 'LOADER_ON';\nexport const LOADER_OFF = 'LOADER_OFF';\n\n// actions\n\nexport const loaderOn = () => ({\n    type: LOADER_ON,\n});\n\nexport const loaderOff = () => ({\n    type: LOADER_OFF,\n});\n\n// reducers\n\nexport const loaderReducer = (state = false, { type }) => {\n    switch (type) {\n        case LOADER_ON:\n            return true;\n        case LOADER_OFF:\n            return false;\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const getLoader = state => state.loading;\n","import axios from 'axios';\nimport queryString from 'query-string';\n\nexport const URL = 'https://demo9165932.mockable.io/products';\n\nexport const fetchData = () => axios.get(URL).then(({ data }) => data.products);\n\nexport const getSearchValue = props => queryString.parse(props).item;\n","// actionsTypes\n\nexport const SHOW_ERROR = 'SHOW_ERROR';\n\n// actions\n\nexport const showError = () => ({\n    type: SHOW_ERROR,\n});\n// reducers\n\nexport const errorReducer = (state = false, { type }) => {\n    switch (type) {\n        case SHOW_ERROR:\n            return true;\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const getErrorMessage = state => state.error;\n","import { put, call, takeEvery } from 'redux-saga/effects';\nimport { loaderOn, loaderOff } from './loading';\nimport { fetchData } from '../services/fetchData';\nimport { showError } from './error';\n\n// actionsTypes\n\nexport const ADD_PRODUCT = 'ADD_PRODUCT';\nexport const FETCH_PRODUCTS = 'FETCH_PRODUCTS';\n\n// actions\n\nexport const addProducts = products => ({\n    type: ADD_PRODUCT,\n    payload: products,\n});\n\nexport const fetchProducts = () => ({\n    type: FETCH_PRODUCTS,\n});\n\n// reducers\n\nexport const productsReducer = (state = [], { type, payload }) => {\n    switch (type) {\n        case FETCH_PRODUCTS:\n            return state;\n        case ADD_PRODUCT:\n            return payload;\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const getProducts = state => state.products;\n\n// saga\n\nfunction* loadProducts() {\n    try {\n        yield put(loaderOn());\n        const data = yield call(fetchData);\n        yield put(addProducts(data));\n        yield put(loaderOff());\n    } catch (error) {\n        yield put(loaderOff());\n        yield put(showError());\n    }\n}\n\nexport default function* rootSaga() {\n    yield takeEvery(FETCH_PRODUCTS, loadProducts);\n}\n","// actionsTypes\n\nexport const ADD_VALUE = 'ADD_VALUE';\n\n// actions\n\nexport const addValue = value => ({\n    type: ADD_VALUE,\n    payload: value,\n});\n\n// reducers\n\nexport const valueReducer = (state = '', { type, payload }) => {\n    switch (type) {\n        case ADD_VALUE:\n            return payload;\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const getValue = state => state.value;\n","// actionsTypes\n\nexport const ADD_CATEGORY = 'ADD_CATEGORY';\n\n// actions\n\nexport const addCategory = category => ({\n    type: ADD_CATEGORY,\n    payload: category,\n});\n\n// reducers\n\nexport const categoryReducer = (state = '', { type, payload }) => {\n    switch (type) {\n        case ADD_CATEGORY:\n            return payload;\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const getCategory = state => state.category;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ProductItem from './ProductsItem/ProductsItem';\nimport { List } from '../../styledComponents/styled';\nimport { getProducts } from '../../redux/products';\nimport { getValue } from '../../redux/value';\nimport { getCategory } from '../../redux/category';\n\nconst filterProductsByCategory = (products, category) =>\n    products.filter(el =>\n        el.bsr_category.toLowerCase().includes(category.toLowerCase()),\n    );\n\nconst ProductsList = ({ products, value, category }) => {\n    const filteredByCategory =\n        category !== 'All Categories'\n            ? filterProductsByCategory(products, category)\n            : products;\n\n    const filteredProducts = value\n        ? filteredByCategory.filter(el =>\n              el.name.toLowerCase().includes(value.toLowerCase()),\n          )\n        : filteredByCategory;\n\n    return (\n        <List>\n            {filteredProducts.map(el => (\n                <ProductItem {...el} key={el.asin} />\n            ))}\n        </List>\n    );\n};\n\nProductsList.propTypes = {\n    products: PropTypes.arrayOf(\n        PropTypes.shape({\n            asin: PropTypes.string.isRequired,\n        }),\n    ).isRequired,\n};\n\nconst mapStateToProps = state => ({\n    products: getProducts(state),\n    value: getValue(state),\n    category: getCategory(state),\n});\n\nexport default connect(mapStateToProps)(ProductsList);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getSearchValue } from '../../services/fetchData';\n\nclass ProductsInput extends Component {\n    state = {\n        text: '',\n    };\n\n    componentDidMount() {\n        const { location } = this.props;\n\n        if (location.search) {\n            const result = getSearchValue(location.search);\n\n            this.setState({\n                text: result,\n            });\n        }\n    }\n\n    handleChange = ({ target }) => {\n        const { name, value } = target;\n        const { onSearch } = this.props;\n\n        this.setState(\n            {\n                [name]: value,\n            },\n            () => onSearch(value),\n        );\n    };\n\n    render() {\n        const { text } = this.state;\n\n        return (\n            <>\n                <input\n                    type=\"text\"\n                    value={text}\n                    onChange={this.handleChange}\n                    name=\"text\"\n                    className=\"form-element\"\n                    placeholder=\"Enter name of product to search...\"\n                />\n            </>\n        );\n    }\n}\n\nProductsInput.propTypes = {\n    onSearch: PropTypes.func.isRequired,\n};\n\nexport default withRouter(ProductsInput);\n","import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport shortid from 'shortid';\nimport { ListCategoryDescription } from '../../styledComponents/styled';\nimport { getValue } from '../../redux/value';\nimport { addCategory } from '../../redux/category';\nimport { getProducts } from '../../redux/products';\n\nconst categories = [\n    {\n        text: 'All Categories',\n        path: '/',\n    },\n    {\n        text: 'Home & Kitchen',\n        path: '/Home & Kitchen',\n    },\n    {\n        text: 'Sports & Outdoors',\n        path: '/Sports & Outdoors',\n    },\n    {\n        text: 'Health & Personal Care',\n        path: '/Health & PersonalCare',\n    },\n    {\n        text: 'Baby Products',\n        path: '/Baby Products',\n    },\n];\n\nconst CategoryList = ({ location, value, setCategory }) => {\n    return (\n        <>\n            <ul>\n                {categories.map(el => (\n                    <li key={shortid.generate()}>\n                        <NavLink\n                            to={{\n                                pathname: el.path,\n                                search: value ? location.search : null,\n                            }}\n                        >\n                            <ListCategoryDescription\n                                onClick={() => setCategory(el.text)}\n                            >\n                                {el.text}\n                            </ListCategoryDescription>\n                        </NavLink>\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    products: getProducts(state),\n    value: getValue(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setCategory: category => dispatch(addCategory(category)),\n});\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withRouter,\n)(CategoryList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Route, withRouter } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport ProductsList from '../ProdutsList/ProductsList';\nimport ProductsInput from '../ProductsInput/ProductsInput';\nimport CategoryList from '../CategoryList/CategoryList';\nimport { getProducts, fetchProducts } from '../../redux/products';\nimport { getLoader } from '../../redux/loading';\nimport { getValue, addValue } from '../../redux/value';\nimport { addCategory, getCategory } from '../../redux/category';\nimport { getSearchValue } from '../../services/fetchData';\n\nclass App extends Component {\n    componentDidMount() {\n        const { location, fetchData, changeCategory } = this.props;\n\n        fetchData();\n\n        changeCategory(location.pathname.slice(1));\n\n        if (location.search) {\n            const result = getSearchValue(location.search);\n\n            this.onSearch(result);\n        }\n    }\n\n    onSearch = value => {\n        const { history, location, changeValue } = this.props;\n\n        changeValue(value);\n\n        history.push({\n            ...location,\n            search: `item=${value}`,\n        });\n    };\n\n    handleChange = value => {\n        this.onSearch(value);\n    };\n\n    render() {\n        const { loading } = this.props;\n\n        return (\n            <Container>\n                {loading && (\n                    <Loader\n                        type=\"Triangle\"\n                        color=\"#00BFFF\"\n                        style={{ textAlign: 'center' }}\n                    />\n                )}\n                <Row className=\"justify-content-md-center\">\n                    <Col sm={10}>\n                        <ProductsInput onSearch={this.handleChange} />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={3}>\n                        <CategoryList />\n                    </Col>\n                    <Col sm={9}>\n                        <Route path=\"/\" component={ProductsList} />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    products: getProducts(state),\n    loading: getLoader(state),\n    value: getValue(state),\n    category: getCategory(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchData: () => dispatch(fetchProducts()),\n    changeValue: value => dispatch(addValue(value)),\n    changeCategory: category => dispatch(addCategory(category)),\n});\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withRouter,\n)(App);\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga, { productsReducer } from '../products';\nimport { loaderReducer } from '../loading';\nimport { errorReducer } from '../error';\nimport { valueReducer } from '../value';\nimport { categoryReducer } from '../category';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middleware = [sagaMiddleware];\n\nconst rootReducer = combineReducers({\n    products: productsReducer,\n    loading: loaderReducer,\n    error: errorReducer,\n    value: valueReducer, // searchValue\n    category: categoryReducer,\n});\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(...middleware)),\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './components/App/App';\nimport store from './redux/store/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter basename=\"/\">\n            <App />\n        </HashRouter>\n    </Provider>,\n\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}